{"version":3,"sources":["components/AddCategoria.js","helpers/getGifs.js","components/GitGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategoria","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GitGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","GitExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAe,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCHlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAGbC,EAHa,iDAGmCC,UAAUH,GAH7C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCHPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,4BAAIA,QCHHO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAKtB,ECFwB,SAACA,GAGzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAbAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAIGqB,EDvB0BO,CAAa5B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QACrB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADAA,EAAIC,aEStBkB,EAzBM,WAEjB,MAAoC3C,mBAAS,CAAC,gBAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KACA,OACI,qCACI,8CACA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBACA,6BAKQ6C,EAAWrB,KAAI,SAAAT,GAAS,OACpB,cAAC,EAAD,CAEIA,UAAWA,GADNA,Y,MCbjC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7e56bd41.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategoria = ({ setCategorias }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(''); //Si no se envia un parámetro en useState se presenta un error en consola ya que useState es undefined\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue(e.target.value); //Escribe en la caja de texto\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //Previene el refresh de la página\r\n\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategorias(cats => [inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategoria.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}","/**\r\n * Retorna los Gits encontrados por categoría\r\n * @param {*} categoria\r\n * @returns Listado de Gits encontrados por categoría\r\n */\r\nexport const getGifs = async ( categoria ) => {\r\n\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=mlMy4TveF58ggED6NTgzPtrH1aPJYtBF`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n\r\n};","import React from 'react'\r\n\r\nexport const GitGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={ title } />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GitGridItem } from './GitGridItem';\r\n\r\nexport const GifGrid = ({ categoria }) => {\r\n\r\n    /**\r\n     * Destructuración al llamar useFetchGifs\r\n     */\r\n    const { data:images, loading } = useFetchGifs(categoria);\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{categoria}</h3>\r\n\r\n            {loading && <p className='animate__animated animate__flash'>Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GitGridItem\r\n                            key={img.id}\r\n                            { ...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","/**\r\n * Custom Hook\r\n */\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n\r\n    //Estado de renderización [useState]\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    /**\r\n     * Se ejecuta la renderización solo si existe un cambio\r\n     */\r\n    useEffect(() => {\r\n        getGifs(categoria)\r\n            .then(imgs => {\r\n                console.log(imgs);\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [categoria]);\r\n\r\n\r\n    //el state es la información que se envía en el useState\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategoria } from './components/AddCategoria';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GitExpertApp = () => {\r\n     //Cargar categorías para que sean renderizadas por React\r\n    const [categorias, setCategorias] = useState(['Dragon Ball']);\r\n    return (\r\n        <>\r\n            <h1>GitExpertApp</h1>\r\n            <AddCategoria setCategorias={setCategorias} />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    /**\r\n                     * Llamar a Hook GifGrid\r\n                     */\r\n                    categorias.map(categoria => (\r\n                        <GifGrid\r\n                            key={categoria}\r\n                            categoria={categoria}\r\n                        />))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GitExpertApp;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GitExpertApp from './GitExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GitExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}